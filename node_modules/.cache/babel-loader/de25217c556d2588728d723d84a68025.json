{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { isLeapYearIndex, parseNDigits, parseNumericPattern } from \"../utils.js\";\nimport { Parser } from \"../Parser.js\";\nimport { numericPatterns } from \"../constants.js\";\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Day of the month\n\nexport class DateParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 90);\n\n    _defineProperty(this, \"subPriority\", 1);\n\n    _defineProperty(this, \"incompatibleTokens\", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case 'd':\n        return parseNumericPattern(numericPatterns.date, dateString);\n\n      case 'do':\n        return match.ordinalNumber(dateString, {\n          unit: 'date'\n        });\n\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    var year = date.getUTCFullYear();\n    var isLeapYear = isLeapYearIndex(year);\n    var month = date.getUTCMonth();\n\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setUTCDate(value);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}