{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport { styled } from '@mui/material/styles';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { ClockPointer } from './ClockPointer';\nimport { useUtils } from '../internals/hooks/useUtils';\nimport { WrapperVariantContext } from '../internals/components/wrappers/WrapperVariantContext';\nimport { getHours, getMinutes } from './shared';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst ClockRoot = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: theme.spacing(2)\n  };\n});\nconst ClockClock = styled('div')({\n  backgroundColor: 'rgba(0,0,0,.07)',\n  borderRadius: '50%',\n  height: 220,\n  width: 220,\n  flexShrink: 0,\n  position: 'relative',\n  pointerEvents: 'none'\n});\nconst ClockSquareMask = styled('div')(_ref2 => {\n  let {\n    ownerState\n  } = _ref2;\n  return _extends({\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'auto',\n    outline: 0,\n    // Disable scroll capabilities.\n    touchAction: 'none',\n    userSelect: 'none'\n  }, ownerState.disabled ? {} : {\n    '@media (pointer: fine)': {\n      cursor: 'pointer',\n      borderRadius: '50%'\n    },\n    '&:active': {\n      cursor: 'move'\n    }\n  });\n});\nconst ClockPin = styled('div')(_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return {\n    width: 6,\n    height: 6,\n    borderRadius: '50%',\n    backgroundColor: theme.palette.primary.main,\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)'\n  };\n});\nconst ClockAmButton = styled(IconButton)(_ref4 => {\n  let {\n    theme,\n    ownerState\n  } = _ref4;\n  return _extends({\n    zIndex: 1,\n    position: 'absolute',\n    bottom: ownerState.ampmInClock ? 64 : 8,\n    left: 8\n  }, ownerState.meridiemMode === 'am' && {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.light\n    }\n  });\n});\nconst ClockPmButton = styled(IconButton)(_ref5 => {\n  let {\n    theme,\n    ownerState\n  } = _ref5;\n  return _extends({\n    zIndex: 1,\n    position: 'absolute',\n    bottom: ownerState.ampmInClock ? 64 : 8,\n    right: 8\n  }, ownerState.meridiemMode === 'pm' && {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.light\n    }\n  });\n});\n/**\n * @ignore - internal component.\n */\n\nexport function Clock(props) {\n  const {\n    ampm,\n    ampmInClock,\n    autoFocus,\n    children,\n    date,\n    getClockLabelText,\n    handleMeridiemChange,\n    isTimeDisabled,\n    meridiemMode,\n    minutesStep = 1,\n    onChange,\n    selectedId,\n    type,\n    value,\n    disabled,\n    readOnly\n  } = props;\n  const ownerState = props;\n  const utils = useUtils();\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  const isMoving = React.useRef(false);\n  const isSelectedTimeDisabled = isTimeDisabled(value, type);\n  const isPointerInner = !ampm && type === 'hours' && (value < 1 || value > 12);\n\n  const handleValueChange = (newValue, isFinish) => {\n    if (disabled || readOnly) {\n      return;\n    }\n\n    if (isTimeDisabled(newValue, type)) {\n      return;\n    }\n\n    onChange(newValue, isFinish);\n  };\n\n  const setTime = (event, isFinish) => {\n    let {\n      offsetX,\n      offsetY\n    } = event;\n\n    if (offsetX === undefined) {\n      const rect = event.target.getBoundingClientRect();\n      offsetX = event.changedTouches[0].clientX - rect.left;\n      offsetY = event.changedTouches[0].clientY - rect.top;\n    }\n\n    const newSelectedValue = type === 'seconds' || type === 'minutes' ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));\n    handleValueChange(newSelectedValue, isFinish);\n  };\n\n  const handleTouchMove = event => {\n    isMoving.current = true;\n    setTime(event, 'shallow');\n  };\n\n  const handleTouchEnd = event => {\n    if (isMoving.current) {\n      setTime(event, 'finish');\n      isMoving.current = false;\n    }\n  };\n\n  const handleMouseMove = event => {\n    // event.buttons & PRIMARY_MOUSE_BUTTON\n    if (event.buttons > 0) {\n      setTime(event.nativeEvent, 'shallow');\n    }\n  };\n\n  const handleMouseUp = event => {\n    if (isMoving.current) {\n      isMoving.current = false;\n    }\n\n    setTime(event.nativeEvent, 'finish');\n  };\n\n  const hasSelected = React.useMemo(() => {\n    if (type === 'hours') {\n      return true;\n    }\n\n    return value % 5 === 0;\n  }, [type, value]);\n  const keyboardControlStep = type === 'minutes' ? minutesStep : 1;\n  const listboxRef = React.useRef(null); // Since this is rendered when a Popper is opened we can't use passive effects.\n  // Focusing in passive effects in Popper causes scroll jump.\n\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      // The ref not being resolved would be a bug in MUI.\n      listboxRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  const handleKeyDown = event => {\n    // TODO: Why this early exit?\n    if (isMoving.current) {\n      return;\n    }\n\n    switch (event.key) {\n      case 'Home':\n        // annulate both hours and minutes\n        handleValueChange(0, 'partial');\n        event.preventDefault();\n        break;\n\n      case 'End':\n        handleValueChange(type === 'minutes' ? 59 : 23, 'partial');\n        event.preventDefault();\n        break;\n\n      case 'ArrowUp':\n        handleValueChange(value + keyboardControlStep, 'partial');\n        event.preventDefault();\n        break;\n\n      case 'ArrowDown':\n        handleValueChange(value - keyboardControlStep, 'partial');\n        event.preventDefault();\n        break;\n\n      default: // do nothing\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(ClockRoot, {\n    children: [/*#__PURE__*/_jsxs(ClockClock, {\n      children: [/*#__PURE__*/_jsx(ClockSquareMask, {\n        onTouchMove: handleTouchMove,\n        onTouchEnd: handleTouchEnd,\n        onMouseUp: handleMouseUp,\n        onMouseMove: handleMouseMove,\n        ownerState: {\n          disabled\n        }\n      }), !isSelectedTimeDisabled && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(ClockPin, {}), date && /*#__PURE__*/_jsx(ClockPointer, {\n          type: type,\n          value: value,\n          isInner: isPointerInner,\n          hasSelected: hasSelected\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        \"aria-activedescendant\": selectedId,\n        \"aria-label\": getClockLabelText(type, date, utils),\n        ref: listboxRef,\n        role: \"listbox\",\n        onKeyDown: handleKeyDown,\n        tabIndex: 0,\n        children: children\n      })]\n    }), ampm && (wrapperVariant === 'desktop' || ampmInClock) && /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ClockAmButton, {\n        onClick: readOnly ? undefined : () => handleMeridiemChange('am'),\n        disabled: disabled || meridiemMode === null,\n        ownerState: ownerState,\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          children: \"AM\"\n        })\n      }), /*#__PURE__*/_jsx(ClockPmButton, {\n        disabled: disabled || meridiemMode === null,\n        onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),\n        ownerState: ownerState,\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          children: \"PM\"\n        })\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}