{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMakeStyles = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nconst react_1 = require(\"react\");\n\nconst Object_fromEntries_1 = require(\"./tools/polyfills/Object.fromEntries\");\n\nconst objectKeys_1 = require(\"./tools/objectKeys\");\n\nconst cssAndCx_1 = require(\"./cssAndCx\");\n\nconst getDependencyArrayRef_1 = require(\"./tools/getDependencyArrayRef\");\n\nconst typeGuard_1 = require(\"./tools/typeGuard\");\n\nconst cache_1 = require(\"./cache\");\n\nconst assert_1 = require(\"./tools/assert\");\n\nconst mergeClasses_1 = require(\"./mergeClasses\");\n\nlet counter = 0;\n\nfunction createMakeStyles(params) {\n  const {\n    useTheme\n  } = params;\n  /** returns useStyle. */\n\n  function makeStyles(params) {\n    const {\n      name: nameOrWrappedName,\n      uniqId = counter++\n    } = params !== null && params !== void 0 ? params : {};\n    const name = typeof nameOrWrappedName !== \"object\" ? nameOrWrappedName : Object.keys(nameOrWrappedName)[0];\n    return function (cssObjectByRuleNameOrGetCssObjectByRuleName) {\n      const getCssObjectByRuleName = typeof cssObjectByRuleNameOrGetCssObjectByRuleName === \"function\" ? cssObjectByRuleNameOrGetCssObjectByRuleName : () => cssObjectByRuleNameOrGetCssObjectByRuleName;\n      return function useStyles(params, styleOverrides) {\n        var _a, _b;\n\n        const theme = useTheme();\n        const {\n          css,\n          cx\n        } = (0, cssAndCx_1.useCssAndCx)();\n        const cache = (0, cache_1.useTssEmotionCache)();\n        let classes = (0, react_1.useMemo)(() => {\n          const refClassesCache = {};\n          const refClasses = typeof Proxy !== \"undefined\" && new Proxy({}, {\n            \"get\": (_target, propertyKey) => {\n              if (typeof propertyKey === \"symbol\") {\n                (0, assert_1.assert)(false);\n              }\n\n              return refClassesCache[propertyKey] = `${cache.key}-${uniqId}${name !== undefined ? `-${name}` : \"\"}-${propertyKey}-ref`;\n            }\n          });\n          const cssObjectByRuleName = getCssObjectByRuleName(theme, params, refClasses || {});\n          const classes = (0, Object_fromEntries_1.objectFromEntries)((0, objectKeys_1.objectKeys)(cssObjectByRuleName).map(ruleName => {\n            const cssObject = cssObjectByRuleName[ruleName];\n\n            if (!cssObject.label) {\n              cssObject.label = `${name !== undefined ? `${name}-` : \"\"}${ruleName}`;\n            }\n\n            return [ruleName, `${css(cssObject)}${(0, typeGuard_1.typeGuard)(ruleName, ruleName in refClassesCache) ? ` ${refClassesCache[ruleName]}` : \"\"}`];\n          }));\n          (0, objectKeys_1.objectKeys)(refClassesCache).forEach(ruleName => {\n            if (ruleName in classes) {\n              return;\n            }\n\n            classes[ruleName] = refClassesCache[ruleName];\n          });\n          return classes;\n        }, [cache, css, cx, theme, (0, getDependencyArrayRef_1.getDependencyArrayRef)(params)]);\n        const propsClasses = styleOverrides === null || styleOverrides === void 0 ? void 0 : styleOverrides.props.classes;\n        {\n          classes = (0, react_1.useMemo)(() => (0, mergeClasses_1.mergeClasses)(classes, propsClasses, cx), [classes, (0, getDependencyArrayRef_1.getDependencyArrayRef)(propsClasses), cx]);\n        }\n        {\n          let cssObjectByRuleNameOrGetCssObjectByRuleName = undefined;\n\n          try {\n            cssObjectByRuleNameOrGetCssObjectByRuleName = name !== undefined ? (_b = (_a = theme.components) === null || _a === void 0 ? void 0 : _a[name]) === null || _b === void 0 ? void 0 : _b.styleOverrides : undefined; // eslint-disable-next-line no-empty\n          } catch (_c) {}\n\n          const themeClasses = (0, react_1.useMemo)(() => {\n            if (!cssObjectByRuleNameOrGetCssObjectByRuleName) {\n              return undefined;\n            }\n\n            const themeClasses = {};\n\n            for (const ruleName in cssObjectByRuleNameOrGetCssObjectByRuleName) {\n              const cssObjectOrGetCssObject = cssObjectByRuleNameOrGetCssObjectByRuleName[ruleName];\n\n              if (!(cssObjectOrGetCssObject instanceof Object)) {\n                continue;\n              }\n\n              themeClasses[ruleName] = css(typeof cssObjectOrGetCssObject === \"function\" ? cssObjectOrGetCssObject(Object.assign({\n                theme,\n                \"ownerState\": styleOverrides === null || styleOverrides === void 0 ? void 0 : styleOverrides.ownerState\n              }, styleOverrides === null || styleOverrides === void 0 ? void 0 : styleOverrides.props)) : cssObjectOrGetCssObject);\n            }\n\n            return themeClasses;\n          }, [cssObjectByRuleNameOrGetCssObjectByRuleName === undefined ? undefined : JSON.stringify(cssObjectByRuleNameOrGetCssObjectByRuleName), (0, getDependencyArrayRef_1.getDependencyArrayRef)(styleOverrides === null || styleOverrides === void 0 ? void 0 : styleOverrides.props), (0, getDependencyArrayRef_1.getDependencyArrayRef)(styleOverrides === null || styleOverrides === void 0 ? void 0 : styleOverrides.ownerState), css]);\n          classes = (0, react_1.useMemo)(() => (0, mergeClasses_1.mergeClasses)(classes, themeClasses, cx), [classes, themeClasses, cx]);\n        }\n        return {\n          classes,\n          theme,\n          css,\n          cx\n        };\n      };\n    };\n  }\n\n  function useStyles() {\n    const theme = useTheme();\n    const {\n      css,\n      cx\n    } = (0, cssAndCx_1.useCssAndCx)();\n    return {\n      theme,\n      css,\n      cx\n    };\n  }\n\n  return {\n    makeStyles,\n    useStyles\n  };\n}\n\nexports.createMakeStyles = createMakeStyles;","map":null,"metadata":{},"sourceType":"script"}