{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Parser } from \"../Parser.js\";\nimport { mapValue, parseNDigits } from \"../utils.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\"; // Local day of week\n\nexport class LocalDayParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 90);\n\n    _defineProperty(this, \"incompatibleTokens\", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);\n  }\n\n  parse(dateString, token, match, options) {\n    var valueCallback = function (value) {\n      var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case 'e':\n      case 'ee':\n        // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n\n      case 'eo':\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: 'day'\n        }), valueCallback);\n      // Tue\n\n      case 'eee':\n        return match.day(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.day(dateString, {\n          width: 'short',\n          context: 'formatting'\n        }) || match.day(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return match.day(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return match.day(dateString, {\n          width: 'short',\n          context: 'formatting'\n        }) || match.day(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return match.day(dateString, {\n          width: 'wide',\n          context: 'formatting'\n        }) || match.day(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.day(dateString, {\n          width: 'short',\n          context: 'formatting'\n        }) || match.day(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setUTCDay(date, value, options);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}