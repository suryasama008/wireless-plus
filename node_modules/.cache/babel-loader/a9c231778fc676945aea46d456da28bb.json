{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Parser } from \"../Parser.js\";\nimport { parseNDigits } from \"../utils.js\";\nexport class QuarterParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 120);\n\n    _defineProperty(this, \"incompatibleTokens\", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n      case 'QQ':\n        // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return match.ordinalNumber(dateString, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return match.quarter(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.quarter(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return match.quarter(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return match.quarter(dateString, {\n          width: 'wide',\n          context: 'formatting'\n        }) || match.quarter(dateString, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }) || match.quarter(dateString, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setUTCMonth((value - 1) * 3, 1);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}